CLIOptions::CLIOptions()				[(<<<<< CELL 1-A >>>>>)]				[(<<<<< CELL 1-B >>>>>)]				[(<<<<< CELL 1-C >>>>>)]				[(<<<<< CELL 1-D >>>>>)]
void CLIOptions::setSrcOrTsvInput(FILE **srcOrTsv, const char *path, const char *mode, int bufferMode,				[(<<<<< CELL 2-A >>>>>)]
const char *which) {				[(<<<<< CELL 3-A >>>>>)]				[(<<<<< CELL 3-B >>>>>)]				[(<<<<< CELL 3-C >>>>>)]				[(<<<<< CELL 3-D >>>>>)]				[(<<<<< CELL 3-E >>>>>)]
if (*srcOrTsv != stdin && *srcOrTsv != stdout) {				[(<<<<< CELL 4-A >>>>>)]				[(<<<<< CELL 4-B >>>>>)]
std::string lastError = which;				[(<<<<< CELL 5-A >>>>>)]				[(<<<<< CELL 5-B >>>>>)]
lastError.append(" file can only be specified once");				[(<<<<< CELL 6-A >>>>>)]				[(<<<<< CELL 6-B >>>>>)]				[(<<<<< CELL 6-C >>>>>)]				[(<<<<< CELL 6-D >>>>>)]				[(<<<<< CELL 6-E >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 7-A >>>>>)]				[(<<<<< CELL 7-B >>>>>)]				[(<<<<< CELL 7-C >>>>>)]				[(<<<<< CELL 7-D >>>>>)]
if (*srcOrTsv != nullptr) {				[(<<<<< CELL 8-A >>>>>)]				[(<<<<< CELL 8-B >>>>>)]
std::setvbuf(*srcOrTsv, nullptr, bufferMode, IO_BUFF_SIZE);				[(<<<<< CELL 9-A >>>>>)]
std::string lastError = "I/O error opening ";				[(<<<<< CELL 10-A >>>>>)]				[(<<<<< CELL 10-B >>>>>)]				[(<<<<< CELL 10-C >>>>>)]				[(<<<<< CELL 10-D >>>>>)]				[(<<<<< CELL 10-E >>>>>)]
lastError.append(which);				[(<<<<< CELL 11-A >>>>>)]
lastError.append(" file");				[(<<<<< CELL 12-A >>>>>)]				[(<<<<< CELL 12-B >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 13-A >>>>>)]				[(<<<<< CELL 13-B >>>>>)]				[(<<<<< CELL 13-C >>>>>)]
void CLIOptions::setSeedInputOrOutput(FILE **inOrOut, const char *path, const char *mode, int bufferMode,				[(<<<<< CELL 14-A >>>>>)]				[(<<<<< CELL 14-B >>>>>)]				[(<<<<< CELL 14-C >>>>>)]
const char *which) {				[(<<<<< CELL 15-A >>>>>)]				[(<<<<< CELL 15-B >>>>>)]				[(<<<<< CELL 15-C >>>>>)]				[(<<<<< CELL 15-D >>>>>)]
if (*inOrOut != nullptr) {				[(<<<<< CELL 16-A >>>>>)]
std::string lastError = which;				[(<<<<< CELL 17-A >>>>>)]				[(<<<<< CELL 17-B >>>>>)]				[(<<<<< CELL 17-C >>>>>)]				[(<<<<< CELL 17-D >>>>>)]				[(<<<<< CELL 17-E >>>>>)]
lastError.append(" file can only be specified once");				[(<<<<< CELL 18-A >>>>>)]				[(<<<<< CELL 18-B >>>>>)]				[(<<<<< CELL 18-C >>>>>)]				[(<<<<< CELL 18-D >>>>>)]				[(<<<<< CELL 18-E >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 19-A >>>>>)]				[(<<<<< CELL 19-B >>>>>)]
if (*inOrOut != nullptr) {				[(<<<<< CELL 20-A >>>>>)]
std::setvbuf(*inOrOut, nullptr, bufferMode, IO_BUFF_SIZE);				[(<<<<< CELL 21-A >>>>>)]				[(<<<<< CELL 21-B >>>>>)]				[(<<<<< CELL 21-C >>>>>)]				[(<<<<< CELL 21-D >>>>>)]				[(<<<<< CELL 21-E >>>>>)]
std::string lastError = "I/O error opening ";				[(<<<<< CELL 22-A >>>>>)]				[(<<<<< CELL 22-B >>>>>)]
lastError.append(which);				[(<<<<< CELL 23-A >>>>>)]				[(<<<<< CELL 23-B >>>>>)]
lastError.append(" file");				[(<<<<< CELL 24-A >>>>>)]				[(<<<<< CELL 24-B >>>>>)]				[(<<<<< CELL 24-C >>>>>)]				[(<<<<< CELL 24-D >>>>>)]				[(<<<<< CELL 24-E >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 25-A >>>>>)]				[(<<<<< CELL 25-B >>>>>)]				[(<<<<< CELL 25-C >>>>>)]				[(<<<<< CELL 25-D >>>>>)]				[(<<<<< CELL 25-E >>>>>)]
void CLIOptions::setSrcInput(const char *path) {				[(<<<<< CELL 26-A >>>>>)]				[(<<<<< CELL 26-B >>>>>)]				[(<<<<< CELL 26-C >>>>>)]				[(<<<<< CELL 26-D >>>>>)]				[(<<<<< CELL 26-E >>>>>)]
if (!std::filesystem::exists(path)) {				[(<<<<< CELL 27-A >>>>>)]
std::ostringstream os;				[(<<<<< CELL 28-A >>>>>)]
os << "Source file \'" << path << "\' was not found.";				[(<<<<< CELL 29-A >>>>>)]				[(<<<<< CELL 29-B >>>>>)]				[(<<<<< CELL 29-C >>>>>)]
throw IOErrorException(sanitizeOutputMessage(os.str()));				[(<<<<< CELL 30-A >>>>>)]				[(<<<<< CELL 30-B >>>>>)]
setSrcOrTsvInput(&(srcInput), path, "r", _IOFBF, "source code input");  // full buffer mode				[(<<<<< CELL 31-A >>>>>)]
void CLIOptions::setTsvInput(const char *path) {				[(<<<<< CELL 32-A >>>>>)]				[(<<<<< CELL 32-B >>>>>)]				[(<<<<< CELL 32-C >>>>>)]				[(<<<<< CELL 32-D >>>>>)]				[(<<<<< CELL 32-E >>>>>)]
if (!std::filesystem::exists(path)) {				[(<<<<< CELL 33-A >>>>>)]				[(<<<<< CELL 33-B >>>>>)]				[(<<<<< CELL 33-C >>>>>)]				[(<<<<< CELL 33-D >>>>>)]
std::ostringstream os;				[(<<<<< CELL 34-A >>>>>)]
os << "TSV file \'" << path << "\' was not found.";				[(<<<<< CELL 35-A >>>>>)]				[(<<<<< CELL 35-B >>>>>)]				[(<<<<< CELL 35-C >>>>>)]				[(<<<<< CELL 35-D >>>>>)]
throw IOErrorException(sanitizeOutputMessage(os.str()));				[(<<<<< CELL 36-A >>>>>)]				[(<<<<< CELL 36-B >>>>>)]
setSrcOrTsvInput(&(tsvInput), path, "r", _IOFBF, "TSV mutations input");  // full buffer mode				[(<<<<< CELL 37-A >>>>>)]				[(<<<<< CELL 37-B >>>>>)]				[(<<<<< CELL 37-C >>>>>)]
void CLIOptions::setOutputFileName(const char *path) { outputFileName = std::string(path); }				[(<<<<< CELL 38-A >>>>>)]				[(<<<<< CELL 38-B >>>>>)]
void CLIOptions::setResOutput(const char *path) {				[(<<<<< CELL 39-A >>>>>)]				[(<<<<< CELL 39-B >>>>>)]				[(<<<<< CELL 39-C >>>>>)]				[(<<<<< CELL 39-D >>>>>)]				[(<<<<< CELL 39-E >>>>>)]
setSrcOrTsvInput(&(resOutput), path, "w", _IONBF, "resulting output");  // NOTICE: no buffering here for performance				[(<<<<< CELL 40-A >>>>>)]
void CLIOptions::setSeedInput(const char *path) {				[(<<<<< CELL 41-A >>>>>)]				[(<<<<< CELL 41-B >>>>>)]				[(<<<<< CELL 41-C >>>>>)]				[(<<<<< CELL 41-D >>>>>)]
if (seedString.has_value()) {				[(<<<<< CELL 42-A >>>>>)]
throw InvalidArgumentException("options --seed and --read-seed are mutually exclusive. Please choose one");				[(<<<<< CELL 43-A >>>>>)]				[(<<<<< CELL 43-B >>>>>)]				[(<<<<< CELL 43-C >>>>>)]				[(<<<<< CELL 43-D >>>>>)]				[(<<<<< CELL 43-E >>>>>)]
setSeedInputOrOutput(&(seedInput), path, "r", _IONBF, "seed input");  // NOTICE: no buffering here for correctness				[(<<<<< CELL 44-A >>>>>)]
void CLIOptions::setSeedOutput(const char *path) {				[(<<<<< CELL 45-A >>>>>)]				[(<<<<< CELL 45-B >>>>>)]				[(<<<<< CELL 45-C >>>>>)]
setSeedInputOrOutput(&(seedOutput), path, "w", _IONBF, "seed output");  // NOTICE: no buffering here for performance				[(<<<<< CELL 46-A >>>>>)]
void CLIOptions::setSeed(const char *seed) {				[(<<<<< CELL 47-A >>>>>)]				[(<<<<< CELL 47-B >>>>>)]				[(<<<<< CELL 47-C >>>>>)]
if (seedString.has_value()) { throw InvalidArgumentException("seed string can only be specified once"); }				[(<<<<< CELL 48-A >>>>>)]				[(<<<<< CELL 48-B >>>>>)]
if (CLIOptions::seedInput != nullptr) {				[(<<<<< CELL 49-A >>>>>)]				[(<<<<< CELL 49-B >>>>>)]				[(<<<<< CELL 49-C >>>>>)]
throw InvalidArgumentException("options --seed and --read-seed are mutually exclusive. Please choose one");				[(<<<<< CELL 50-A >>>>>)]
CLIOptions::seedString.emplace(seed);				[(<<<<< CELL 51-A >>>>>)]				[(<<<<< CELL 51-B >>>>>)]				[(<<<<< CELL 51-C >>>>>)]
if (CLIOptions::seedString.value().size() != RNG_SEED_LENGTH) {				[(<<<<< CELL 52-A >>>>>)]				[(<<<<< CELL 52-B >>>>>)]
char err[60];				[(<<<<< CELL 53-A >>>>>)]				[(<<<<< CELL 53-B >>>>>)]
sprintf(err, " Error : Invalid input seed. Expected %d hexadecimal digits", RNG_SEED_LENGTH);				[(<<<<< CELL 54-A >>>>>)]				[(<<<<< CELL 54-B >>>>>)]				[(<<<<< CELL 54-C >>>>>)]				[(<<<<< CELL 54-D >>>>>)]
throw InvalidSeedException(err);				[(<<<<< CELL 55-A >>>>>)]
void CLIOptions::setMinOrMaxMutCount(std::optional<std::int32_t> *minOrMax, const char *count, const char *shortName,				[(<<<<< CELL 56-A >>>>>)]				[(<<<<< CELL 56-B >>>>>)]
const char *fullName) {				[(<<<<< CELL 57-A >>>>>)]				[(<<<<< CELL 57-B >>>>>)]				[(<<<<< CELL 57-C >>>>>)]				[(<<<<< CELL 57-D >>>>>)]
if (minOrMax->has_value()) {				[(<<<<< CELL 58-A >>>>>)]				[(<<<<< CELL 58-B >>>>>)]				[(<<<<< CELL 58-C >>>>>)]				[(<<<<< CELL 58-D >>>>>)]
std::string lastError = fullName;				[(<<<<< CELL 59-A >>>>>)]				[(<<<<< CELL 59-B >>>>>)]				[(<<<<< CELL 59-C >>>>>)]
lastError.append(" can only be specified once");				[(<<<<< CELL 60-A >>>>>)]				[(<<<<< CELL 60-B >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 61-A >>>>>)]				[(<<<<< CELL 61-B >>>>>)]				[(<<<<< CELL 61-C >>>>>)]
char *endPtr = (char *)count;				[(<<<<< CELL 62-A >>>>>)]				[(<<<<< CELL 62-B >>>>>)]				[(<<<<< CELL 62-C >>>>>)]
unsigned long retStatus = strtoul(count, &endPtr, 0);				[(<<<<< CELL 63-A >>>>>)]				[(<<<<< CELL 63-B >>>>>)]				[(<<<<< CELL 63-C >>>>>)]
if (endPtr == count || retStatus == ULONG_MAX || INT32_MAX < retStatus) {				[(<<<<< CELL 64-A >>>>>)]
std::string lastError = "invalid value specified for --";				[(<<<<< CELL 65-A >>>>>)]				[(<<<<< CELL 65-B >>>>>)]				[(<<<<< CELL 65-C >>>>>)]
lastError.append(shortName);				[(<<<<< CELL 66-A >>>>>)]				[(<<<<< CELL 66-B >>>>>)]				[(<<<<< CELL 66-C >>>>>)]
lastError.append("count. Expected a number");				[(<<<<< CELL 67-A >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 68-A >>>>>)]				[(<<<<< CELL 68-B >>>>>)]				[(<<<<< CELL 68-C >>>>>)]
if (mutCount.has_value() && (minMutCount.has_value() || maxMutCount.has_value())) {				[(<<<<< CELL 69-A >>>>>)]
throw InvalidArgumentException(				[(<<<<< CELL 70-A >>>>>)]				[(<<<<< CELL 70-B >>>>>)]				[(<<<<< CELL 70-C >>>>>)]				[(<<<<< CELL 70-D >>>>>)]				[(<<<<< CELL 70-E >>>>>)]
"""option groups --count and --max-count/--min-count are mutually exclusive. Please choose one group"");"				[(<<<<< CELL 71-A >>>>>)]				[(<<<<< CELL 71-B >>>>>)]				[(<<<<< CELL 71-C >>>>>)]
void CLIOptions::setMutCount(const char *count) { setMinOrMaxMutCount(&(mutCount), count, "", "mutation count"); }				[(<<<<< CELL 72-A >>>>>)]				[(<<<<< CELL 72-B >>>>>)]				[(<<<<< CELL 72-C >>>>>)]
void CLIOptions::setMinMutCount(const char *count) {				[(<<<<< CELL 73-A >>>>>)]				[(<<<<< CELL 73-B >>>>>)]
setMinOrMaxMutCount(&(minMutCount), count, "min-", "minimum mutation count");				[(<<<<< CELL 74-A >>>>>)]
void CLIOptions::setMinMutCount(std::int32_t count) { minMutCount = count; }				[(<<<<< CELL 75-A >>>>>)]
void CLIOptions::setMaxMutCount(const char *count) {				[(<<<<< CELL 76-A >>>>>)]				[(<<<<< CELL 76-B >>>>>)]				[(<<<<< CELL 76-C >>>>>)]				[(<<<<< CELL 76-D >>>>>)]
setMinOrMaxMutCount(&(maxMutCount), count, "max-", "maximum mutation count");				[(<<<<< CELL 77-A >>>>>)]
void CLIOptions::setMaxMutCount(std::int32_t count) { maxMutCount = count; }				[(<<<<< CELL 78-A >>>>>)]
static char asciitolower_for_format(char in) {				[(<<<<< CELL 79-A >>>>>)]				[(<<<<< CELL 79-B >>>>>)]				[(<<<<< CELL 79-C >>>>>)]				[(<<<<< CELL 79-D >>>>>)]				[(<<<<< CELL 79-E >>>>>)]
if (in <= 'Z' && in >= 'A') return in - ('Z' - 'z');				[(<<<<< CELL 80-A >>>>>)]				[(<<<<< CELL 80-B >>>>>)]
void CLIOptions::setFormat(const char *fmt) {				[(<<<<< CELL 81-A >>>>>)]				[(<<<<< CELL 81-B >>>>>)]
if (CLIOptions::format.has_value()) { throw InvalidArgumentException("format can only be specified once"); }				[(<<<<< CELL 82-A >>>>>)]				[(<<<<< CELL 82-B >>>>>)]				[(<<<<< CELL 82-C >>>>>)]				[(<<<<< CELL 82-D >>>>>)]
std::string str(fmt);				[(<<<<< CELL 83-A >>>>>)]
std::transform(str.begin(), str.end(), str.begin(), asciitolower_for_format);				[(<<<<< CELL 84-A >>>>>)]				[(<<<<< CELL 84-B >>>>>)]				[(<<<<< CELL 84-C >>>>>)]				[(<<<<< CELL 84-D >>>>>)]
if (0 == std::strcmp(str.c_str(), "html")) { format = Format::HTML; }				[(<<<<< CELL 85-A >>>>>)]
format = Format::SRCTEXT;				[(<<<<< CELL 86-A >>>>>)]
format = Format::TSVTEXT;				[(<<<<< CELL 87-A >>>>>)]				[(<<<<< CELL 87-B >>>>>)]
std::string lastError = "invalid --format option value. Must be one of html, srctext, or tsvtext. Got \"";				[(<<<<< CELL 88-A >>>>>)]				[(<<<<< CELL 88-B >>>>>)]				[(<<<<< CELL 88-C >>>>>)]				[(<<<<< CELL 88-D >>>>>)]
lastError.append(sanitizeOutputMessage(fmt));				[(<<<<< CELL 89-A >>>>>)]				[(<<<<< CELL 89-B >>>>>)]				[(<<<<< CELL 89-C >>>>>)]
lastError.append("\"");				[(<<<<< CELL 90-A >>>>>)]				[(<<<<< CELL 90-B >>>>>)]				[(<<<<< CELL 90-C >>>>>)]				[(<<<<< CELL 90-D >>>>>)]
throw InvalidArgumentException(sanitizeOutputMessage(lastError));				[(<<<<< CELL 91-A >>>>>)]				[(<<<<< CELL 91-B >>>>>)]				[(<<<<< CELL 91-C >>>>>)]
std::string CLIOptions::getSrcString() {				[(<<<<< CELL 92-A >>>>>)]				[(<<<<< CELL 92-B >>>>>)]				[(<<<<< CELL 92-C >>>>>)]				[(<<<<< CELL 92-D >>>>>)]				[(<<<<< CELL 92-E >>>>>)]
if (CLIOptions::srcInput == stdin && CLIOptions::tsvInput == stdin) {				[(<<<<< CELL 93-A >>>>>)]
initializeSrcTsvTogetherFromStdin(&(CLIOptions::srcString), &(CLIOptions::tsvString));				[(<<<<< CELL 94-A >>>>>)]				[(<<<<< CELL 94-B >>>>>)]				[(<<<<< CELL 94-C >>>>>)]				[(<<<<< CELL 94-D >>>>>)]
if (!CLIOptions::srcString.has_value()) {				[(<<<<< CELL 95-A >>>>>)]				[(<<<<< CELL 95-B >>>>>)]				[(<<<<< CELL 95-C >>>>>)]				[(<<<<< CELL 95-D >>>>>)]
srcString = readWholeFileIntoString(CLIOptions::srcInput, "I/O error reading source code file");				[(<<<<< CELL 96-A >>>>>)]				[(<<<<< CELL 96-B >>>>>)]
std::string CLIOptions::getTsvString() {				[(<<<<< CELL 97-A >>>>>)]
if (srcInput == stdin && tsvInput == stdin) { initializeSrcTsvTogetherFromStdin(&(srcString), &(tsvString)); }				[(<<<<< CELL 98-A >>>>>)]				[(<<<<< CELL 98-B >>>>>)]				[(<<<<< CELL 98-C >>>>>)]				[(<<<<< CELL 98-D >>>>>)]				[(<<<<< CELL 98-E >>>>>)]
if (!tsvString.has_value()) {				[(<<<<< CELL 99-A >>>>>)]				[(<<<<< CELL 99-B >>>>>)]
tsvString = readWholeFileIntoString(tsvInput, "I/O error reading TSV mutations file");				[(<<<<< CELL 100-A >>>>>)]				[(<<<<< CELL 100-B >>>>>)]				[(<<<<< CELL 100-C >>>>>)]				[(<<<<< CELL 100-D >>>>>)]
void CLIOptions::putResOutput(std::string result) {				[(<<<<< CELL 101-A >>>>>)]				[(<<<<< CELL 101-B >>>>>)]				[(<<<<< CELL 101-C >>>>>)]				[(<<<<< CELL 101-D >>>>>)]				[(<<<<< CELL 101-E >>>>>)]
writeStringToFileHandle(resOutput, result);				[(<<<<< CELL 102-A >>>>>)]				[(<<<<< CELL 102-B >>>>>)]				[(<<<<< CELL 102-C >>>>>)]
void CLIOptions::putSeedOutput(std::string result) { writeStringToFileHandle(seedOutput, result); }				[(<<<<< CELL 103-A >>>>>)]				[(<<<<< CELL 103-B >>>>>)]				[(<<<<< CELL 103-C >>>>>)]				[(<<<<< CELL 103-D >>>>>)]
bool CLIOptions::hasSeed() { return seedString.has_value() || seedInput != nullptr; }				[(<<<<< CELL 104-A >>>>>)]				[(<<<<< CELL 104-B >>>>>)]				[(<<<<< CELL 104-C >>>>>)]
bool CLIOptions::hasMutCount() { return mutCount.has_value(); }				[(<<<<< CELL 105-A >>>>>)]				[(<<<<< CELL 105-B >>>>>)]				[(<<<<< CELL 105-C >>>>>)]				[(<<<<< CELL 105-D >>>>>)]
bool CLIOptions::hasMinMutCount() { return minMutCount.has_value(); }				[(<<<<< CELL 106-A >>>>>)]				[(<<<<< CELL 106-B >>>>>)]
bool CLIOptions::hasMaxMutCount() { return maxMutCount.has_value(); }				[(<<<<< CELL 107-A >>>>>)]				[(<<<<< CELL 107-B >>>>>)]				[(<<<<< CELL 107-C >>>>>)]				[(<<<<< CELL 107-D >>>>>)]				[(<<<<< CELL 107-E >>>>>)]
bool CLIOptions::hasFormat() { return format.has_value(); }				[(<<<<< CELL 108-A >>>>>)]
bool CLIOptions::seedNeedsExporting() { return seedOutput != nullptr; }				[(<<<<< CELL 109-A >>>>>)]				[(<<<<< CELL 109-B >>>>>)]
bool CLIOptions::hasOutputFileName() { return outputFileName.has_value(); }				[(<<<<< CELL 110-A >>>>>)]				[(<<<<< CELL 110-B >>>>>)]				[(<<<<< CELL 110-C >>>>>)]				[(<<<<< CELL 110-D >>>>>)]
bool CLIOptions::okToOverwriteOutputFile() { return overwriteOutputFile; }				[(<<<<< CELL 111-A >>>>>)]
const char *CLIOptions::getOutputFileName() { return (*outputFileName).c_str(); }				[(<<<<< CELL 112-A >>>>>)]				[(<<<<< CELL 112-B >>>>>)]
void CLIOptions::forceOverwrite() { overwriteOutputFile = true; }				[(<<<<< CELL 113-A >>>>>)]				[(<<<<< CELL 113-B >>>>>)]
std::string CLIOptions::getSeed() {				[(<<<<< CELL 114-A >>>>>)]				[(<<<<< CELL 114-B >>>>>)]
if (!seedString.has_value()) {				[(<<<<< CELL 115-A >>>>>)]				[(<<<<< CELL 115-B >>>>>)]				[(<<<<< CELL 115-C >>>>>)]
if (seedInput != nullptr) {				[(<<<<< CELL 116-A >>>>>)]				[(<<<<< CELL 116-B >>>>>)]				[(<<<<< CELL 116-C >>>>>)]
readSeedFileIntoString(seedInput, &(seedString));  // throws if error				[(<<<<< CELL 117-A >>>>>)]				[(<<<<< CELL 117-B >>>>>)]				[(<<<<< CELL 117-C >>>>>)]				[(<<<<< CELL 117-D >>>>>)]				[(<<<<< CELL 117-E >>>>>)]
if (CLIOptions::seedOutput != nullptr) {				[(<<<<< CELL 118-A >>>>>)]				[(<<<<< CELL 118-B >>>>>)]				[(<<<<< CELL 118-C >>>>>)]				[(<<<<< CELL 118-D >>>>>)]				[(<<<<< CELL 118-E >>>>>)]
int32_t CLIOptions::getMutCount() { return mutCount.value(); }				[(<<<<< CELL 119-A >>>>>)]
int32_t CLIOptions::getMinMutCount() { return minMutCount.value(); }				[(<<<<< CELL 120-A >>>>>)]
int32_t CLIOptions::getMaxMutCount() { return maxMutCount.value(); }				[(<<<<< CELL 121-A >>>>>)]				[(<<<<< CELL 121-B >>>>>)]				[(<<<<< CELL 121-C >>>>>)]				[(<<<<< CELL 121-D >>>>>)]
Format CLIOptions::getFormat() { return format.value(); }				[(<<<<< CELL 122-A >>>>>)]
CLIOptions::~CLIOptions() {				[(<<<<< CELL 123-A >>>>>)]				[(<<<<< CELL 123-B >>>>>)]				[(<<<<< CELL 123-C >>>>>)]				[(<<<<< CELL 123-D >>>>>)]				[(<<<<< CELL 123-E >>>>>)]
closeAndNullifyFileHandle(&(srcInput));				[(<<<<< CELL 124-A >>>>>)]				[(<<<<< CELL 124-B >>>>>)]				[(<<<<< CELL 124-C >>>>>)]				[(<<<<< CELL 124-D >>>>>)]				[(<<<<< CELL 124-E >>>>>)]
closeAndNullifyFileHandle(&(tsvInput));				[(<<<<< CELL 125-A >>>>>)]				[(<<<<< CELL 125-B >>>>>)]				[(<<<<< CELL 125-C >>>>>)]
closeAndNullifyFileHandle(&(resOutput));				[(<<<<< CELL 126-A >>>>>)]				[(<<<<< CELL 126-B >>>>>)]
closeAndNullifyFileHandle(&(seedInput));				[(<<<<< CELL 127-A >>>>>)]				[(<<<<< CELL 127-B >>>>>)]				[(<<<<< CELL 127-C >>>>>)]				[(<<<<< CELL 127-D >>>>>)]				[(<<<<< CELL 127-E >>>>>)]
closeAndNullifyFileHandle(&(seedOutput));				[(<<<<< CELL 128-A >>>>>)]				[(<<<<< CELL 128-B >>>>>)]
void CLIOptions::addWarning(std::string str) { warnings.push_back(sanitizeOutputMessage(str)); }				[(<<<<< CELL 129-A >>>>>)]				[(<<<<< CELL 129-B >>>>>)]				[(<<<<< CELL 129-C >>>>>)]
std::string CLIOptions::getWarnings() {				[(<<<<< CELL 130-A >>>>>)]				[(<<<<< CELL 130-B >>>>>)]				[(<<<<< CELL 130-C >>>>>)]
std::ostringstream os;				[(<<<<< CELL 131-A >>>>>)]				[(<<<<< CELL 131-B >>>>>)]
std::string retVal;				[(<<<<< CELL 132-A >>>>>)]				[(<<<<< CELL 132-B >>>>>)]				[(<<<<< CELL 132-C >>>>>)]				[(<<<<< CELL 132-D >>>>>)]
if (noMatchLines.size()) {				[(<<<<< CELL 133-A >>>>>)]				[(<<<<< CELL 133-B >>>>>)]				[(<<<<< CELL 133-C >>>>>)]
os << "The pattern cell" << (noMatchLines.size() > 1 ? "s" : "") << " beginning at the"				[(<<<<< CELL 134-A >>>>>)]				[(<<<<< CELL 134-B >>>>>)]
<< (noMatchLines.size() > 1 ? "se" : "") << " following line number" << (noMatchLines.size() > 1 ? "s" : "")				[(<<<<< CELL 135-A >>>>>)]				[(<<<<< CELL 135-B >>>>>)]				[(<<<<< CELL 135-C >>>>>)]				[(<<<<< CELL 135-D >>>>>)]				[(<<<<< CELL 135-E >>>>>)]
<< " had no match" << (noMatchLines.size() > 1 ? "es" : "") << " in the source file: { ";				[(<<<<< CELL 136-A >>>>>)]				[(<<<<< CELL 136-B >>>>>)]
for (auto i = noMatchLines.begin(); i < noMatchLines.end(); ++i) {				[(<<<<< CELL 137-A >>>>>)]				[(<<<<< CELL 137-B >>>>>)]				[(<<<<< CELL 137-C >>>>>)]				[(<<<<< CELL 137-D >>>>>)]
os << *i << ((i + 1) == noMatchLines.end() ? " " : ", ");				[(<<<<< CELL 138-A >>>>>)]				[(<<<<< CELL 138-B >>>>>)]
os << "}\n   ";				[(<<<<< CELL 139-A >>>>>)]				[(<<<<< CELL 139-B >>>>>)]
if (multipleMatchLines.size()) {				[(<<<<< CELL 140-A >>>>>)]				[(<<<<< CELL 140-B >>>>>)]
os << "The pattern cell" << (multipleMatchLines.size() > 1 ? "s" : "") << " beginning at the"				[(<<<<< CELL 141-A >>>>>)]				[(<<<<< CELL 141-B >>>>>)]
<< (multipleMatchLines.size() > 1 ? "se" : "") << " following line number"				[(<<<<< CELL 142-A >>>>>)]				[(<<<<< CELL 142-B >>>>>)]
<< (multipleMatchLines.size() > 1 ? "s" : "") << " had multiple matches in the source file: { ";				[(<<<<< CELL 143-A >>>>>)]				[(<<<<< CELL 143-B >>>>>)]				[(<<<<< CELL 143-C >>>>>)]				[(<<<<< CELL 143-D >>>>>)]				[(<<<<< CELL 143-E >>>>>)]
for (auto i = multipleMatchLines.begin(); i < multipleMatchLines.end(); ++i) {				[(<<<<< CELL 144-A >>>>>)]				[(<<<<< CELL 144-B >>>>>)]				[(<<<<< CELL 144-C >>>>>)]				[(<<<<< CELL 144-D >>>>>)]				[(<<<<< CELL 144-E >>>>>)]
os << *i << ((i + 1) == multipleMatchLines.end() ? " " : ", ");				[(<<<<< CELL 145-A >>>>>)]
os << "}\n";				[(<<<<< CELL 146-A >>>>>)]
if (warnings.size()) {				[(<<<<< CELL 147-A >>>>>)]
for (const auto &str : warnings) { os << "   " << str << std::endl; }				[(<<<<< CELL 148-A >>>>>)]				[(<<<<< CELL 148-B >>>>>)]				[(<<<<< CELL 148-C >>>>>)]				[(<<<<< CELL 148-D >>>>>)]				[(<<<<< CELL 148-E >>>>>)]
os << std::endl;				[(<<<<< CELL 149-A >>>>>)]				[(<<<<< CELL 149-B >>>>>)]
if ((os.str().size())) {				[(<<<<< CELL 150-A >>>>>)]				[(<<<<< CELL 150-B >>>>>)]				[(<<<<< CELL 150-C >>>>>)]				[(<<<<< CELL 150-D >>>>>)]
std::string retVal{"\x1B[33mWarnings:\x1B[0m\n   "};				[(<<<<< CELL 151-A >>>>>)]				[(<<<<< CELL 151-B >>>>>)]
retVal += os.str();				[(<<<<< CELL 152-A >>>>>)]				[(<<<<< CELL 152-B >>>>>)]				[(<<<<< CELL 152-C >>>>>)]
void CLIOptions::addNoMatchLine(int n) { noMatchLines.push_back(n); }				[(<<<<< CELL 153-A >>>>>)]				[(<<<<< CELL 153-B >>>>>)]				[(<<<<< CELL 153-C >>>>>)]				[(<<<<< CELL 153-D >>>>>)]
void CLIOptions::addMultipleMatchLine(int n) { multipleMatchLines.push_back(n); }				[(<<<<< CELL 154-A >>>>>)]				[(<<<<< CELL 154-B >>>>>)]
