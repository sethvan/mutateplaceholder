char cardNumber[15][12] = {"first", "second", "third", "fourth", "fifth", "sixth", "seventh",				[(<<<<< CELL 1-A >>>>>)]
"""eighth"", ""ninth"", ""tenth"", ""eleventh"", ""twelfth"", ""thirteenth"","				[(<<<<< CELL 2-A >>>>>)]				[(<<<<< CELL 2-B >>>>>)]				[(<<<<< CELL 2-C >>>>>)]
"""fourteenth"", ""fifteenth""};"				[(<<<<< CELL 3-A >>>>>)]
int get_int_value(Type type) {				[(<<<<< CELL 4-A >>>>>)]				[(<<<<< CELL 4-B >>>>>)]				[(<<<<< CELL 4-C >>>>>)]				[(<<<<< CELL 4-D >>>>>)]				[(<<<<< CELL 4-E >>>>>)]
int intVal;				[(<<<<< CELL 5-A >>>>>)]				[(<<<<< CELL 5-B >>>>>)]				[(<<<<< CELL 5-C >>>>>)]				[(<<<<< CELL 5-D >>>>>)]				[(<<<<< CELL 5-E >>>>>)]
printf("\nHow many %ss are you considering? (maximum%d)\nNumber of %ss? = ", type.name, type.max, type.name);				[(<<<<< CELL 6-A >>>>>)]				[(<<<<< CELL 6-B >>>>>)]				[(<<<<< CELL 6-C >>>>>)]				[(<<<<< CELL 6-D >>>>>)]
if ((scanf("%i", &intVal) != 1) || (intVal < type.min || intVal > type.max)) {				[(<<<<< CELL 7-A >>>>>)]				[(<<<<< CELL 7-B >>>>>)]				[(<<<<< CELL 7-C >>>>>)]				[(<<<<< CELL 7-D >>>>>)]
printf("\nInvalid entry, please enter an integer between %d and %d.\n", type.min, type.max);				[(<<<<< CELL 8-A >>>>>)]
while ((getchar()) != '\n');				[(<<<<< CELL 9-A >>>>>)]				[(<<<<< CELL 9-B >>>>>)]				[(<<<<< CELL 9-C >>>>>)]
char *myGets(char *st, int n) {				[(<<<<< CELL 10-A >>>>>)]				[(<<<<< CELL 10-B >>>>>)]				[(<<<<< CELL 10-C >>>>>)]
char *ret_val;				[(<<<<< CELL 11-A >>>>>)]				[(<<<<< CELL 11-B >>>>>)]
if ((ret_val = fgets(st, n, stdin)) != NULL) {				[(<<<<< CELL 12-A >>>>>)]				[(<<<<< CELL 12-B >>>>>)]
st[strcspn(st, "\n")] = 0;				[(<<<<< CELL 13-A >>>>>)]
StringArray get_string_array(Type type) {				[(<<<<< CELL 14-A >>>>>)]				[(<<<<< CELL 14-B >>>>>)]				[(<<<<< CELL 14-C >>>>>)]
StringArray sa;				[(<<<<< CELL 15-A >>>>>)]
sa.size = get_int_value(type);				[(<<<<< CELL 16-A >>>>>)]
sa.array = NULL;				[(<<<<< CELL 17-A >>>>>)]				[(<<<<< CELL 17-B >>>>>)]
if (!(sa.array = malloc(sa.size * sizeof(char *)))) {				[(<<<<< CELL 18-A >>>>>)]
printf("Failure to allocate memory!\n");				[(<<<<< CELL 19-A >>>>>)]
printf("\nWe will now enter the names of your %ss, please keep them short as\n"				[(<<<<< CELL 20-A >>>>>)]				[(<<<<< CELL 20-B >>>>>)]
""" the output spreadsheet will only display the first %d characters\n"","				[(<<<<< CELL 21-A >>>>>)]				[(<<<<< CELL 21-B >>>>>)]
type.name, type.dislength);				[(<<<<< CELL 22-A >>>>>)]				[(<<<<< CELL 22-B >>>>>)]				[(<<<<< CELL 22-C >>>>>)]				[(<<<<< CELL 22-D >>>>>)]				[(<<<<< CELL 22-E >>>>>)]
for (int i = 0; i < sa.size; ++i) {				[(<<<<< CELL 23-A >>>>>)]				[(<<<<< CELL 23-B >>>>>)]
if (!(sa.array[i] = malloc(30))) {				[(<<<<< CELL 24-A >>>>>)]
printf("Failure to allocate memory!");				[(<<<<< CELL 25-A >>>>>)]				[(<<<<< CELL 25-B >>>>>)]				[(<<<<< CELL 25-C >>>>>)]
printf("\nWhat is your %s %s?:\n", cardNumber[i], type.name);				[(<<<<< CELL 26-A >>>>>)]				[(<<<<< CELL 26-B >>>>>)]
myGets(sa.array[i], 30);				[(<<<<< CELL 27-A >>>>>)]				[(<<<<< CELL 27-B >>>>>)]
StringArray sort_factor(StringArray factorArray) {				[(<<<<< CELL 28-A >>>>>)]
char *temp = NULL;				[(<<<<< CELL 29-A >>>>>)]				[(<<<<< CELL 29-B >>>>>)]				[(<<<<< CELL 29-C >>>>>)]
int mostImportant = 0;				[(<<<<< CELL 30-A >>>>>)]				[(<<<<< CELL 30-B >>>>>)]				[(<<<<< CELL 30-C >>>>>)]				[(<<<<< CELL 30-D >>>>>)]				[(<<<<< CELL 30-E >>>>>)]
for (int i = 0; i < factorArray.size - 1; ++i) {				[(<<<<< CELL 31-A >>>>>)]				[(<<<<< CELL 31-B >>>>>)]				[(<<<<< CELL 31-C >>>>>)]
if (i == 0)				[(<<<<< CELL 32-A >>>>>)]				[(<<<<< CELL 32-B >>>>>)]				[(<<<<< CELL 32-C >>>>>)]				[(<<<<< CELL 32-D >>>>>)]
printf("\nAmong the factors listed below, which is the most important?\n");				[(<<<<< CELL 33-A >>>>>)]
printf("\nAnd which is the most important of these that remain?\n\n");				[(<<<<< CELL 34-A >>>>>)]				[(<<<<< CELL 34-B >>>>>)]
for (int j = 1; j < factorArray.size - i + 1; ++j) {				[(<<<<< CELL 35-A >>>>>)]				[(<<<<< CELL 35-B >>>>>)]				[(<<<<< CELL 35-C >>>>>)]				[(<<<<< CELL 35-D >>>>>)]				[(<<<<< CELL 35-E >>>>>)]
printf("%i. %s\n", j, factorArray.array[i + j - 1]);				[(<<<<< CELL 36-A >>>>>)]
printf("\nEnter the corresponding number:  ");				[(<<<<< CELL 37-A >>>>>)]				[(<<<<< CELL 37-B >>>>>)]				[(<<<<< CELL 37-C >>>>>)]				[(<<<<< CELL 37-D >>>>>)]
if ((scanf("%i", &mostImportant) != 1) || (mostImportant < 1 || mostImportant > factorArray.size - i))				[(<<<<< CELL 38-A >>>>>)]				[(<<<<< CELL 38-B >>>>>)]				[(<<<<< CELL 38-C >>>>>)]
printf("\nInvalid entry, please enter an integer between 1 and %i.\n", factorArray.size - i);				[(<<<<< CELL 39-A >>>>>)]				[(<<<<< CELL 39-B >>>>>)]
while ((getchar()) != '\n')				[(<<<<< CELL 40-A >>>>>)]				[(<<<<< CELL 40-B >>>>>)]				[(<<<<< CELL 40-C >>>>>)]				[(<<<<< CELL 40-D >>>>>)]
mostImportant += i - 1;				[(<<<<< CELL 41-A >>>>>)]				[(<<<<< CELL 41-B >>>>>)]				[(<<<<< CELL 41-C >>>>>)]				[(<<<<< CELL 41-D >>>>>)]				[(<<<<< CELL 41-E >>>>>)]
temp = factorArray.array[mostImportant];				[(<<<<< CELL 42-A >>>>>)]				[(<<<<< CELL 42-B >>>>>)]				[(<<<<< CELL 42-C >>>>>)]				[(<<<<< CELL 42-D >>>>>)]				[(<<<<< CELL 42-E >>>>>)]
factorArray.array[mostImportant] = factorArray.array[i];				[(<<<<< CELL 43-A >>>>>)]				[(<<<<< CELL 43-B >>>>>)]				[(<<<<< CELL 43-C >>>>>)]
factorArray.array[i] = temp;				[(<<<<< CELL 44-A >>>>>)]				[(<<<<< CELL 44-B >>>>>)]
float *qtfy_factor(StringArray factorArray) {				[(<<<<< CELL 45-A >>>>>)]				[(<<<<< CELL 45-B >>>>>)]				[(<<<<< CELL 45-C >>>>>)]
float *pfGrade = NULL;				[(<<<<< CELL 46-A >>>>>)]				[(<<<<< CELL 46-B >>>>>)]				[(<<<<< CELL 46-C >>>>>)]				[(<<<<< CELL 46-D >>>>>)]
if (!(pfGrade = malloc(factorArray.size * sizeof(float)))) {				[(<<<<< CELL 47-A >>>>>)]
printf("Failure to allocate memory!\n");				[(<<<<< CELL 48-A >>>>>)]				[(<<<<< CELL 48-B >>>>>)]				[(<<<<< CELL 48-C >>>>>)]				[(<<<<< CELL 48-D >>>>>)]
for (int i = 0; i < factorArray.size; ++i) {				[(<<<<< CELL 49-A >>>>>)]
printf("\nFrom 1-1000 how important is the factor of:\n\"%s\"?: ", factorArray.array[i]);				[(<<<<< CELL 50-A >>>>>)]				[(<<<<< CELL 50-B >>>>>)]				[(<<<<< CELL 50-C >>>>>)]
if ((scanf("%f", &pfGrade[i]) != 1) || (pfGrade[i] < 1.0f || pfGrade[i] > 1000.0f)) {				[(<<<<< CELL 51-A >>>>>)]				[(<<<<< CELL 51-B >>>>>)]				[(<<<<< CELL 51-C >>>>>)]
printf("\nInvalid entry, please enter a number between 1 and 1000.\n");				[(<<<<< CELL 52-A >>>>>)]				[(<<<<< CELL 52-B >>>>>)]
while ((getchar()) != '\n');				[(<<<<< CELL 53-A >>>>>)]				[(<<<<< CELL 53-B >>>>>)]				[(<<<<< CELL 53-C >>>>>)]				[(<<<<< CELL 53-D >>>>>)]				[(<<<<< CELL 53-E >>>>>)]
printf("\n\n");				[(<<<<< CELL 54-A >>>>>)]				[(<<<<< CELL 54-B >>>>>)]
float *rate_compat(StringArray optionArray, StringArray factorArray) {				[(<<<<< CELL 55-A >>>>>)]				[(<<<<< CELL 55-B >>>>>)]				[(<<<<< CELL 55-C >>>>>)]				[(<<<<< CELL 55-D >>>>>)]
int size = factorArray.size * optionArray.size;				[(<<<<< CELL 56-A >>>>>)]				[(<<<<< CELL 56-B >>>>>)]				[(<<<<< CELL 56-C >>>>>)]
float *compatability = NULL;				[(<<<<< CELL 57-A >>>>>)]				[(<<<<< CELL 57-B >>>>>)]
if (!(compatability = malloc(size * sizeof(float)))) {				[(<<<<< CELL 58-A >>>>>)]				[(<<<<< CELL 58-B >>>>>)]				[(<<<<< CELL 58-C >>>>>)]				[(<<<<< CELL 58-D >>>>>)]
printf("Failure to allocate memory!\n");				[(<<<<< CELL 59-A >>>>>)]				[(<<<<< CELL 59-B >>>>>)]				[(<<<<< CELL 59-C >>>>>)]
for (int i = 0; i < size; ++i) {				[(<<<<< CELL 60-A >>>>>)]				[(<<<<< CELL 60-B >>>>>)]
printf("From 0-1000 how ideal is option \"%s\"\nfor factor \"%s\"?:",				[(<<<<< CELL 61-A >>>>>)]				[(<<<<< CELL 61-B >>>>>)]				[(<<<<< CELL 61-C >>>>>)]				[(<<<<< CELL 61-D >>>>>)]				[(<<<<< CELL 61-E >>>>>)]
optionArray.array[i % optionArray.size], factorArray.array[i / optionArray.size]);				[(<<<<< CELL 62-A >>>>>)]				[(<<<<< CELL 62-B >>>>>)]				[(<<<<< CELL 62-C >>>>>)]				[(<<<<< CELL 62-D >>>>>)]				[(<<<<< CELL 62-E >>>>>)]
if ((scanf("%f", &compatability[i]) != 1) || (compatability[i] < 0 || compatability[i] > 1000)) {				[(<<<<< CELL 63-A >>>>>)]				[(<<<<< CELL 63-B >>>>>)]				[(<<<<< CELL 63-C >>>>>)]				[(<<<<< CELL 63-D >>>>>)]
printf("\nInvalid entry, please enter an integer between 0 and 100.\n");				[(<<<<< CELL 64-A >>>>>)]				[(<<<<< CELL 64-B >>>>>)]				[(<<<<< CELL 64-C >>>>>)]				[(<<<<< CELL 64-D >>>>>)]
while ((getchar()) != '\n');				[(<<<<< CELL 65-A >>>>>)]				[(<<<<< CELL 65-B >>>>>)]				[(<<<<< CELL 65-C >>>>>)]				[(<<<<< CELL 65-D >>>>>)]				[(<<<<< CELL 65-E >>>>>)]
printf("\n\n");				[(<<<<< CELL 66-A >>>>>)]				[(<<<<< CELL 66-B >>>>>)]
float *tally_sums(StringArray optionArray, StringArray factorArray, float *compatability, float *pfGrade) {				[(<<<<< CELL 67-A >>>>>)]
int fGradeSize = optionArray.size * factorArray.size;				[(<<<<< CELL 68-A >>>>>)]				[(<<<<< CELL 68-B >>>>>)]				[(<<<<< CELL 68-C >>>>>)]
float *finalGrade = NULL, *finalGradeSum = NULL;				[(<<<<< CELL 69-A >>>>>)]
if (!(finalGrade = malloc(fGradeSize * sizeof(float))) || !(finalGradeSum = calloc(optionArray.size, sizeof(float)))) {				[(<<<<< CELL 70-A >>>>>)]				[(<<<<< CELL 70-B >>>>>)]				[(<<<<< CELL 70-C >>>>>)]				[(<<<<< CELL 70-D >>>>>)]				[(<<<<< CELL 70-E >>>>>)]
printf("Failure to allocate memory!\n");				[(<<<<< CELL 71-A >>>>>)]				[(<<<<< CELL 71-B >>>>>)]				[(<<<<< CELL 71-C >>>>>)]
for (int i = 0; i < fGradeSize; ++i) {				[(<<<<< CELL 72-A >>>>>)]				[(<<<<< CELL 72-B >>>>>)]				[(<<<<< CELL 72-C >>>>>)]				[(<<<<< CELL 72-D >>>>>)]
finalGrade[i] = compatability[i] * pfGrade[i / optionArray.size];				[(<<<<< CELL 73-A >>>>>)]				[(<<<<< CELL 73-B >>>>>)]				[(<<<<< CELL 73-C >>>>>)]				[(<<<<< CELL 73-D >>>>>)]
finalGradeSum[i % optionArray.size] += finalGrade[i];				[(<<<<< CELL 74-A >>>>>)]
free(finalGrade);				[(<<<<< CELL 75-A >>>>>)]				[(<<<<< CELL 75-B >>>>>)]
void display_output_spreadsheet(StringArray optionsArray, StringArray factorsArray, float *compatability, float *pfGrade)				[(<<<<< CELL 76-A >>>>>)]
int line = 0;				[(<<<<< CELL 77-A >>>>>)]				[(<<<<< CELL 77-B >>>>>)]				[(<<<<< CELL 77-C >>>>>)]				[(<<<<< CELL 77-D >>>>>)]
printf("\n\n\n%38s%-80s\n", " ", "          Compatabilities of the options with each corresponding factor");				[(<<<<< CELL 78-A >>>>>)]				[(<<<<< CELL 78-B >>>>>)]				[(<<<<< CELL 78-C >>>>>)]				[(<<<<< CELL 78-D >>>>>)]				[(<<<<< CELL 78-E >>>>>)]
printf("%38s", "Factor     ");				[(<<<<< CELL 79-A >>>>>)]				[(<<<<< CELL 79-B >>>>>)]				[(<<<<< CELL 79-C >>>>>)]				[(<<<<< CELL 79-D >>>>>)]				[(<<<<< CELL 79-E >>>>>)]
for (line = 0; line < 81; line++)				[(<<<<< CELL 80-A >>>>>)]				[(<<<<< CELL 80-B >>>>>)]				[(<<<<< CELL 80-C >>>>>)]
putchar('-');				[(<<<<< CELL 81-A >>>>>)]				[(<<<<< CELL 81-B >>>>>)]				[(<<<<< CELL 81-C >>>>>)]				[(<<<<< CELL 81-D >>>>>)]
printf("\n%-26s%s", "Priority of factors", "|Importance |");				[(<<<<< CELL 82-A >>>>>)]				[(<<<<< CELL 82-B >>>>>)]				[(<<<<< CELL 82-C >>>>>)]				[(<<<<< CELL 82-D >>>>>)]
for (int i = 0; i < optionsArray.size; ++i) {				[(<<<<< CELL 83-A >>>>>)]				[(<<<<< CELL 83-B >>>>>)]				[(<<<<< CELL 83-C >>>>>)]				[(<<<<< CELL 83-D >>>>>)]
printf("%-15.15s|", optionsArray.array[i]);				[(<<<<< CELL 84-A >>>>>)]				[(<<<<< CELL 84-B >>>>>)]				[(<<<<< CELL 84-C >>>>>)]				[(<<<<< CELL 84-D >>>>>)]
if (optionsArray.size < 5) {				[(<<<<< CELL 85-A >>>>>)]				[(<<<<< CELL 85-B >>>>>)]				[(<<<<< CELL 85-C >>>>>)]
for (line = 0; line < 79 - (optionsArray.size * 16); line++)				[(<<<<< CELL 86-A >>>>>)]				[(<<<<< CELL 86-B >>>>>)]				[(<<<<< CELL 86-C >>>>>)]				[(<<<<< CELL 86-D >>>>>)]
putchar(' ');				[(<<<<< CELL 87-A >>>>>)]				[(<<<<< CELL 87-B >>>>>)]
putchar('|');				[(<<<<< CELL 88-A >>>>>)]				[(<<<<< CELL 88-B >>>>>)]				[(<<<<< CELL 88-C >>>>>)]				[(<<<<< CELL 88-D >>>>>)]				[(<<<<< CELL 88-E >>>>>)]
printf("\n");				[(<<<<< CELL 89-A >>>>>)]				[(<<<<< CELL 89-B >>>>>)]				[(<<<<< CELL 89-C >>>>>)]				[(<<<<< CELL 89-D >>>>>)]				[(<<<<< CELL 89-E >>>>>)]
for (line = 0; line < LINE_LENGTH; line++)				[(<<<<< CELL 90-A >>>>>)]				[(<<<<< CELL 90-B >>>>>)]				[(<<<<< CELL 90-C >>>>>)]
putchar('-');				[(<<<<< CELL 91-A >>>>>)]				[(<<<<< CELL 91-B >>>>>)]
for (int i = 0; i < factorsArray.size; ++i) {				[(<<<<< CELL 92-A >>>>>)]				[(<<<<< CELL 92-B >>>>>)]				[(<<<<< CELL 92-C >>>>>)]
printf("\n%2i.%-22.22s |   %4.0lf    |", i + 1, factorsArray.array[i], pfGrade[i]);				[(<<<<< CELL 93-A >>>>>)]				[(<<<<< CELL 93-B >>>>>)]
for (int j = i * optionsArray.size; j < (i + 1) * optionsArray.size; ++j)				[(<<<<< CELL 94-A >>>>>)]				[(<<<<< CELL 94-B >>>>>)]
printf("      %3.0lf      |", compatability[j]);				[(<<<<< CELL 95-A >>>>>)]				[(<<<<< CELL 95-B >>>>>)]				[(<<<<< CELL 95-C >>>>>)]
printf("\n\n");				[(<<<<< CELL 96-A >>>>>)]				[(<<<<< CELL 96-B >>>>>)]				[(<<<<< CELL 96-C >>>>>)]				[(<<<<< CELL 96-D >>>>>)]				[(<<<<< CELL 96-E >>>>>)]
void display_option_totals(StringArray optionsArray, float *finalGradeSum) {				[(<<<<< CELL 97-A >>>>>)]				[(<<<<< CELL 97-B >>>>>)]				[(<<<<< CELL 97-C >>>>>)]				[(<<<<< CELL 97-D >>>>>)]				[(<<<<< CELL 97-E >>>>>)]
printf("\nScore totals in favor of each option:\n\n");				[(<<<<< CELL 98-A >>>>>)]
float best = 0.0f;				[(<<<<< CELL 99-A >>>>>)]				[(<<<<< CELL 99-B >>>>>)]				[(<<<<< CELL 99-C >>>>>)]				[(<<<<< CELL 99-D >>>>>)]				[(<<<<< CELL 99-E >>>>>)]
int index = 0;				[(<<<<< CELL 100-A >>>>>)]				[(<<<<< CELL 100-B >>>>>)]
for (int j = 0; j < optionsArray.size; ++j) {				[(<<<<< CELL 101-A >>>>>)]				[(<<<<< CELL 101-B >>>>>)]
for (int i = 0; i < optionsArray.size; ++i) {				[(<<<<< CELL 102-A >>>>>)]				[(<<<<< CELL 102-B >>>>>)]				[(<<<<< CELL 102-C >>>>>)]
if (finalGradeSum[i] > best) {				[(<<<<< CELL 103-A >>>>>)]				[(<<<<< CELL 103-B >>>>>)]
best = finalGradeSum[i];				[(<<<<< CELL 104-A >>>>>)]
index = i;				[(<<<<< CELL 105-A >>>>>)]				[(<<<<< CELL 105-B >>>>>)]				[(<<<<< CELL 105-C >>>>>)]
printf("%-20s=  %.0f\n", optionsArray.array[index], finalGradeSum[index]);				[(<<<<< CELL 106-A >>>>>)]
finalGradeSum[index] = 0.0f;				[(<<<<< CELL 107-A >>>>>)]				[(<<<<< CELL 107-B >>>>>)]				[(<<<<< CELL 107-C >>>>>)]
best = 0.0f;				[(<<<<< CELL 108-A >>>>>)]				[(<<<<< CELL 108-B >>>>>)]				[(<<<<< CELL 108-C >>>>>)]				[(<<<<< CELL 108-D >>>>>)]
printf(("\n\n\n\n"));				[(<<<<< CELL 109-A >>>>>)]				[(<<<<< CELL 109-B >>>>>)]
